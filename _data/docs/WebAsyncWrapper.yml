Properties:
  # Client
  - name: Client
    code: "Get|Set {WebClient}"
    description: |
      Client to use for executing requests.

  # Request
  - name: Request
    code: "Get|Set {WebRequest}"
    internal: true

  # Callback
  - name: Callback
    code: "Get|Let {String}"
    internal: true

  # CallbackArgs
  - name: CallbackArgs
    code: "Get|Let {Variant}"
    internal: true

  # Http
  - name: Http
    code: "Get|Set {WinHttpRequest}"
    internal: true

Methods:
  # ExecuteAsync
  - name: ExecuteAsync
    code: "ExecuteAsync(Request, Callback, [CallbackArgs])"
    details:
      Request: "`{WebRequest}`"
      Callback: "`{String}`"
      CallbackArgs: "`{Variant}` _Optional_"
    description: |
      Execute the `Request` asynchronously,
      passing the response (and `CallbackArgs`) to the `Callback`.
    example: |
      ' Module: Handler
      Public Sub Simple(Response As WebResponse)
        ' ...
      End Sub
      Public Sub WithArgs(Response As WebResponse, Args As Variant)
        ' ...
      End Sub

      Dim Client As New WebClient
      Client.BaseUrl = "https://api.example.com/v1/"

      ' Wrapper needs Client to execute requests
      Dim Wrapper As New WebAsyncWrapper
      Set Wrapper.Client = Client

      Dim Request As New WebRequest
      Request.Resource = "messages"

      Wrapper.ExecuteAsync Request, "Handler.Simple"

      ' -> Simple called later with response

      ' If you need to pass state to callback, use CallbackArgs
      Dim Args As Variant
      Args = Array("abc", 123)

      Wrapper.ExecuteAsync Request, "Handler.WithArgs", Args

      ' -> WithArgs called later with response and args

  # Clone
  - name: Clone
    code: "Clone() {WebAsyncWrapper}"
    internal: true

  # PrepareAndExecuteRequest
  - name: PrepareAndExecuteRequest
    code: "PrepareAndExecuteRequest(Request, Callback, [CallbackArgs])"
    internal: true

  # TimedOut
  - name: TimedOut
    code: "TimedOut()"
    internal: true

  # RunCallback
  - name: RunCallback
    code: "RunCallback(Response)"
    internal: true
